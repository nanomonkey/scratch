Notes 

* Re-frame
** Dashboards
[[https://github.com/Day8/re-frame-10x][Re-frame-10x]]
** Modals
[[https://github.com/benhowell/re-frame-modal][re-frame modal]]


* IMPLIMENT
** TODO Add Search lookahead for adding item to task
- When item isn't found, and (+) button is clicked, open modal to create item
- after modal, add to tasklist with default number and unit (1 each?)
** TODO Add similar for units 
- Seperate modal, or units may need their own configuration page or be hard coded

** TODO record changes locally in a parametric manner, then update ssb upon user's request.

** TODO Look into gantry system for task management
** TODO Gant Chart view of Recipe based on Task time duration
* example re-frame code projects
- https://github.com/dhruvp/angular-phonecat-re-frame/
- https://github.com/jacekschae/conduit
- https://github.com/vallard/Reagent-Example/



Datomic datastructure:
[e a v t a?]
entity - 
attribute 
value
transaction
added?

* Reagent
- [[https://github.com/reagent-project/reagent-cookbook][Reagent Cookbook]]
* How to describe
** Recipes
- Procedural knowledge about the tasks to reproduce a final product.  
** Task
- A group of steps that are to be done in sequential order with one group of Equipment to transform a group of Ingredients into a final Product.
** Ingredients
- Items that are consumed by a task
** Products
- Items created by a task
** Equipment
- Items used but not consummed by a task
** Duration
- time a task takes to complete

* Dealing with Units
** JS library
- https://github.com/ben-ng/convert-units
* Dealing with rational quantities
#+BEGIN_SRC clojure
(let [[string whole numerator denominator] (re-matches #"(\d+)\s(\d+)/(\d+)" qty)]
  (if fn ;; successful match
    (println (+ (int whole) (/ (int numerator) (int denominator)))
    (println "Unparsable rational number" string)))
#+END_SRC

#+BEGIN_SRC clojure
(?:(?i)(?:[+-]?)(?:(?=[.]?[0-9])(?:[0-9]*)(?:(?:[.])(?:[0-9]{0,}))?)(?:(?:[E])(?:(?:[+-]?)(?:[0-9]+))|))
#+END_SRC


