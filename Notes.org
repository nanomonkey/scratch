Notes 
-----
* Glossary of terms
** Recipes
- A list of tasks needed to produce a Product or Service.  
** Task
*** Composed of three parts
- An ordered list of Steps to achieve a Task
- the Equipment needed, and the time required
- the Ingredient Items needed, and their Units of measure
- any intermediate Products created used in later Tasks
** Ingredients
- Items that are consumed by a Tasks, these can be Products from other Recipes or Tasks
** Products
- Items created by a Recipe's Task
- also known as physical goods
- these can be biproducts (waste) or sellable Items.
** Equipment
- Items used but not consummed by a Task
** Duration
- the time a task takes to complete using equipment
** Services
- Tasks that don't produce Products that are physical goods.
- examples: cleaning, body work, instruction, maintenance tasks
** Units
- the unit of measure needed for each item
- can be converted when an appropriate conversion factor is saved in the system
- stored in relation to SI base units
-----
* Datastructures 
- Record schemas stored as messages in SSB.  
- As messages each has a timestamp, author and unique key not shown
- possible fields to be added later indicated with question mark (?)
*** Item
- name
- description
? density (g/cm^3)
? specs (nutrition, dimensions, sizes, color, etc.)
? wikipedia category
*** Unit
- name
- type [distance, volume or weight]
*** Unit_Conversion
- unit1
- unit2
- conversion_factor
*** Recipe
- name
- description
- tags
? notes
? reference    //citation to previous work or versions from which this is adapted
- task_list  
**** Calculateable from task_list:
+ equipment_list
+ total_time
+ item_list (qty, unit, item)
+ instruction_list
+ media_list

Example:

Rib Eye with Cherry Mustard Marmalead and Porcini
Adapted from Alain Ducasse
Yiels: four .25 kg portions

| INGREDIENTS                     | QUANTITY | SCALING | PROCEDURE                                        |
|---------------------------------+----------+---------+--------------------------------------------------|
| Beef rib eye, bone in 5cm       | 800g     |    100% | 1. Vacuum seal together                          |
| Unsalted butter                 | 40g      |      5% | 2. Cook sous vide in 54 degC bath,               |
|                                 |          |         | about 1 1/4 h.                                   |
|                                 |          |         | 3. Sear surface with blowtorch                   |
|                                 |          |         | yields: Rib Eye, cooked                          |
|---------------------------------+----------+---------+--------------------------------------------------|
| Shallots, finely minced         | 50g      |      6% | 1. Sweat until shallots are tender but not brown |
| Fennel, finely minced           | 25g      |      3% |                                                  |
| Neutral oil                     | 12.5g    |    1.5% | yields: Shallot Mixture                          |
|---------------------------------+----------+---------+--------------------------------------------------|
| Pickled Cherry Brine            | 150g     |     19% | 1. Add to Shallot Mixture                        |
| Red Wine Vinegar                | 50g      |      6% | 2. Reduce to 100g                                |
| Red Wine (Pinot Noir)           | 40g      |      6% |                                                  |
| Quatre epices                   | 0.5g     |   0.05% | yields: Cherry Marmalade                         |
| Black Peppercorns, crushed      | 0.4g     |   0.05% |                                                  |
| Juniper berries, finely ground  | 0.4g     |   0.05% |                                                  |
| Coriander seeds, finely ground  | 0.15g    |   0.02% |                                                  |
|---------------------------------+----------+---------+--------------------------------------------------|
| Pickled cherries, finely minced | 100g     |   12.5% | 1. Whisk into marmalade                          |
| Grain mustard                   | 40g      |      5% |                                                  |
| Morcello cherry puree           | 35g      |    4.5% | yields: Cherry Mustard Marmalead sauce           |
| Pressure-cooked mustard seeds   | 8g       |      1% |                                                  |
|---------------------------------+----------+---------+--------------------------------------------------|
| Porcini (fresh)                 | 100g     |   12.5% | 1. Slice Porcini very thinly                     |
| Nuetral Oil                     | As need  |         | 2. Quickly sautee until golden                   |
|                                 |          |         | yields: Sateed Porcini                           |
|---------------------------------+----------+---------+--------------------------------------------------|
| Salt                            | taste    |         | 1. Slice meat to desired thickness               |
|                                 |          |         | 2. Season meat, marmalade, and mushrooms,        |
|                                 |          |         | and arrange on plate.                            |
|---------------------------------+----------+---------+--------------------------------------------------|

Tips and Technique:
Flaky sea salt is a great way to finish a cooked piece of meat or fish.  It adds crunchy bursts of saltiness. The only problem is that the salt tends to dissolve into the natural juices by the time the dish reaches the table.  Herve This came up with a solution: toss the salt crystals with oil or fat.  A thin layer of oil then seperates the flakes from the cooking juices and prevents the salt from dissolving.

 
**** Json
{ 
  id: MsgId,
  type: "recipe"
  author: FeedId,
  content: {
    name: string,
    timestamp: number,
    tasks:[task_id,]
    description: textfield,
    notes: string
  }
}


*** Tasks
- steps
- duration
- ingredients
- equipment
- media
- yields

- necessary_conditions
**** JSON
{ 
  id: task_id,
  type: "task"
  author: FeedId,
  contents: {
    name: string,
    items: [{item: item-id, qty: number, unit: unit-id }, ...]
    yields: [{item: item-id, qty: number, unit: unit-id }, ...]
    steps: [string, ...]
    notes: string
    equipment: [{item: item-id, qty: number, unit: unit-id }, ...]
    duration: number (ms)
}

*** Suppliers
- contact_info
- order_requirements 
  email, api, minimum costs, net 30, etc.
- price_list 
  item, price, qty, unit (purchase unit may be different then other unit, i.e. box of 8 each)
  
*** People (Contacts?)
- name
? access
- primary_location
- skillset
- contact_info
*** Group (Organization?)
- name
- access
- people_list
- location
*** Location
- name
- lat_long
- address
- sublocations
- tags
- timezone
*** Events
- location (contains timezone, etc.)
- datetime
- participants (group, or list of people)
- duration (calculated from tasks?)
? reoccurring
? frequency
? completion
*** Lot Tracking (completion of an event/task)
- task/recipe/product
- batch
- scan {timestamp, person, tracking number}
*** Payment
- transaction
- person
- payment method (cash, credit card, paypal, bitcoin, etc.)
- tax
- services (shipping, coupons, etc.)
*** Orders
- type [Purchase, Requisition, Transfer, Sales, Physical Inventory?, Merchandise Arrival?]
- location
- supplier
- purchaser
- payment
- item_list (item, qty, unit, price, options)
+ item_total
- shipping_costs
- tax
- signatures
- order_date
- fulfillment_date
*** Purchase_Orders <-- make a part of generic Orders?
- location
- supplier
- purchaser
- signature
- payment_method
- purchase_list (item, qty, unit, price)
- item_total
- tax
- shipping_cost
+ total_cost
*** Requisition_Order  <-- make a part of generic Orders?
- item_list
- created_by
- creation_date
- need_by
*** Chart of Accounts
-name
-department
-account_number 
*** Transactions
- debit_account
- credit_account
- amount
- type [purchase, sale, transfer, payroll, equity disbursement, loan payment, spoilage/loss, etc.] 
- date_time
- memo
- currency_type
*** Products
- qty
- unit
- item
? packaging
? price
? description
? media
? options (sizes, colors, etc.)

*** Sales_Order  <-- make a part of generic Orders?
- location (POS terminal, etc.)
- customer
- product_list (item, qty, unit, options, cost)
+ subtotal
+ sales_tax
+ shipping_costs
- payment_method
*** Physical_Inventory  <-- make a part of generic Orders?
- location
- qoh (item, qty, unit) a.k.a quantity on hand, simpler to use item_list?
- par_levels (bin, item, min_qty, max_qty)
*** Merchandise_Arrival  <-- make a part of generic Orders?
- location
- item_list (item, qty, unit)
- reciever
*** Schedule  <-- role into Events?
- location
- person
- task (event data and process)
- assigned_to (group or person)
- task/recipe
- event
- completing_date
*** Pattern Language
****  Name 
- single word or short phrase that refers to the pattern. This allows for rapid association and retrieval.
**** Problem 
- definition of a problem, including its intent or a desired outcome, and symptoms that would indicate that this problem exists.
**** Context 
– preconditions which must exist in order for that problem to occur; this is often a situation. When forces conflict, the resolutions of those conflicts is often implied by the context.
**** Forces 
– description of forces or constraints and how they interact. Some of the forces may be contradictory. For example: being thorough often conflicts with time or money constraints.
**** Solution 
– instructions, possibly including variants. The solution may include pictures, diagrams, prose, or other media.
**** Examples
– sample applications and solutions, analogies, visual examples, and known uses can be especially helpful, help user understand the context
**** Resulting Context 
– result after the pattern has been applied, including postconditions and side effects. It might also include new problems that might result from solving the original problem.
**** Rationale 
– the thought processes that would go into selecting this pattern, The rationale includes an explanation of why this pattern works, how forces and constraints are resolved to construct a desired outcome.
**** Related Patterns 
– differences and relationships with other patterns, possibly predecessor, antecedents, or alternatives that solve similar problems.

*** Needs
- Search query of Products/Services that one needs

* Contracts
** Legal Domain Specific Language 
- https://catala-lang.org/
* Tutorials
** Re-learn pop-up tutorials for re-frame
- https://github.com/oliyh/re-learn
* Cryptography in Clojure
** Buddy.core
- https://cljdoc.org/d/buddy/buddy-core/1.10.1/doc/user-guide
